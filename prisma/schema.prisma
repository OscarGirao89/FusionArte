// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                  @id @default(autoincrement())
  email                 String               @unique
  name                  String
  role                  String // Estudiante, Profesor, Administrador, Administrativo, Socio
  joined                DateTime             @default(now())
  avatar                String?
  dob                   String? // YYYY-MM-DD
  mobile                String?
  isVisibleToStudents   Boolean?
  isPartner             Boolean?
  bio                   String?
  specialties           String[]
  paymentDetailsJson    String? // JSON string for payment details
  enrolledClasses       DanceClass[]         @relation("ClassEnrolledStudents")
  taughtClasses         DanceClass[]         @relation("ClassTeachers")
  assignedTasks         TaskNote[]           @relation("TaskAssignees")
  studentMemberships    StudentMembership[]
  studentPayments       StudentPayment[]
  attendanceHistory     AttendanceRecord[]
}

model DanceClass {
  id                      String   @id @default(cuid())
  name                    String
  type                    String // recurring, one-time, workshop, rental
  styleId                 String
  levelId                 String
  teacherIds              User[]   @relation("ClassTeachers")
  day                     String?
  time                    String
  room                    String
  duration                String
  capacity                Int
  enrolledStudentIds      User[]   @relation("ClassEnrolledStudents")
  cancellationPolicyHours Int?
  recurrenceMonths        Int?
  date                    String?
  status                  String
  isCancelledAndHidden    Boolean?
  isVisibleToStudents     Boolean?
  rentalContact           String?
  rentalPrice             Float?
  workshopPaymentType     String?
  workshopPaymentValue    Float?
}

model DanceStyle {
  id          String @id @default(cuid())
  name        String @unique
  description String
}

model DanceLevel {
  id          String @id @default(cuid())
  name        String @unique
  description String
}

model MembershipPlan {
  id              String   @id @default(cuid())
  title           String
  price           Float
  description     String
  features        String[]
  isPopular       Boolean?
  durationUnit    String
  durationValue   Int
  visibility      String
  accessType      String
  classCount      Int?
  allowedClasses  String[]
  priceTiersJson  String? // JSON string for price tiers
  studentMemberships StudentMembership[]
  studentPayments StudentPayment[]
  coupons         Coupon[] @relation("CouponApplicablePlans")
}

model StudentMembership {
  id                Int      @id @default(autoincrement())
  user              User     @relation(fields: [userId], references: [id])
  userId            Int
  plan              MembershipPlan @relation(fields: [planId], references: [id])
  planId            String
  startDate         DateTime
  endDate           DateTime
  classesRemaining  Int?
}

model StudentPayment {
  id               String   @id @default(cuid())
  user             User     @relation(fields: [studentId], references: [id])
  studentId        Int
  plan             MembershipPlan @relation(fields: [planId], references: [id])
  planId           String
  invoiceDate      DateTime
  totalAmount      Float
  status           String
  amountPaid       Float
  amountDue        Float
  notes            String?
  lastUpdatedBy    String?
  lastUpdatedDate  DateTime?
}

model Coupon {
  id                  String   @id @default(cuid())
  code                String   @unique
  discountType        String
  discountValue       Float
  expirationDate      DateTime?
  usageLimit          Int?
  status              String
  applicableTo        String
  specificPlanIds     MembershipPlan[] @relation("CouponApplicablePlans")
  specificClassIds    String[]
}

model Transaction {
  id          String   @id @default(cuid())
  type        String
  category    String
  description String
  amount      Float
  date        DateTime
  receiptUrl  String?
}

model AttendanceRecord {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  classId   String
  date      DateTime
  status    String // presente, ausente
}

model TaskNote {
  id              String   @id @default(cuid())
  title           String
  description     String?
  status          String
  category        String
  priority        String?
  assignees       User[]   @relation("TaskAssignees")
  createdAt       DateTime @default(now())
  dueDate         DateTime?
  alertDateTime   DateTime?
  alertDismissed  Boolean? @default(false)
}
