// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                 @id @default(autoincrement())
  email               String              @unique
  name                String
  password            String
  role                String
  joined              DateTime            @default(now())
  avatar              String
  dob                 String?
  mobile              String?
  isVisibleToStudents Boolean?            @default(false)
  isPartner           Boolean?            @default(false)
  bio                 String?
  specialties         String[]
  paymentDetailsJson  Json?               @map("paymentDetails")
  taughtClasses       DanceClass[]        @relation("TeacherClasses")
  enrolledClasses     DanceClass[]        @relation("EnrolledStudents")
  memberships         StudentMembership[]
  payments            StudentPayment[]
  assignedTasks       TaskNote[]          @relation("AssignedTasks")
  attendanceHistory   AttendanceRecord[]
}

model DanceStyle {
  id          String       @id @default(cuid())
  name        String       @unique
  description String
  classes     DanceClass[]
}

model DanceLevel {
  id          String       @id @default(cuid())
  name        String       @unique
  description String
  classes     DanceClass[]
}

model DanceClass {
  id                      String   @id @default(cuid())
  name                    String
  type                    String
  day                     String?
  time                    String
  room                    String
  duration                String
  capacity                Int
  cancellationPolicyHours Int?
  date                    String?
  status                  String   @default("scheduled")
  isCancelledAndHidden    Boolean?
  isVisibleToStudents     Boolean?
  rentalContact           String?
  rentalPrice             Float?
  workshopPaymentType     String?
  workshopPaymentValue    Float?

  style   DanceStyle @relation(fields: [styleId], references: [id])
  styleId String

  level   DanceLevel @relation(fields: [levelId], references: [id])
  levelId String

  teachers         User[] @relation("TeacherClasses")
  enrolledStudents User[] @relation("EnrolledStudents")
}

model StudentMembership {
  id               String   @id @default(cuid())
  userId           Int
  planId           String
  startDate        DateTime
  endDate          DateTime
  classesRemaining Int?
  user             User     @relation(fields: [userId], references: [id])
}

model StudentPayment {
  id              String   @id @default(cuid())
  studentId       Int
  planId          String
  invoiceDate     DateTime
  totalAmount     Float
  status          String
  amountPaid      Float
  amountDue       Float
  notes           String?
  lastUpdatedBy   String?
  lastUpdatedDate DateTime?
  student         User     @relation(fields: [studentId], references: [id])
}

model Coupon {
  id                 String    @id @default(cuid())
  code               String    @unique
  discountType       String
  discountValue      Float
  expirationDate     DateTime?
  usageLimit         Int?
  status             String
  applicableTo       String
  specificPlanIds    String[]
  specificClassIds   String[]
}

model MembershipPlan {
  id               String   @id @default(cuid())
  title            String
  description      String
  price            Float?
  features         String[]
  isPopular        Boolean? @default(false)
  durationUnit     String
  durationValue    Int
  accessType       String
  classCount       Int?
  priceTiersJson   Json?    @map("priceTiers")
  visibility       String   @default("public")
  allowedClasses   String[]
}

model Role {
  id          String   @id
  name        String   @unique
  permissions String[]
}

model Transaction {
  id          String   @id @default(cuid())
  type        String
  category    String
  description String
  amount      Float
  date        DateTime
  receiptUrl  String?
}

model TaskNote {
  id             String    @id @default(cuid())
  title          String
  description    String?
  status         String
  category       String
  priority       String?
  assignees      User[]    @relation("AssignedTasks")
  createdAt      DateTime  @default(now())
  dueDate        DateTime?
  alertDateTime  DateTime?
  alertDismissed Boolean?
}

model AttendanceRecord {
  id        String   @id @default(cuid())
  userId    Int
  classId   String
  date      DateTime
  status    String
  user      User     @relation(fields: [userId], references: [id])
}

model Settings {
  id                       String @id @default("singleton")
  academyName              String
  contactEmail             String
  phone                    String?
  whatsappPhone            String?
  address                  String?
  welcomeMessage           String?
  enableNewSignups         Boolean
  maintenanceMode          Boolean
  logoUrl                  String?
  faviconUrl               String?
  instagramUrl             String?
  facebookUrl              String?
  tiktokUrl                String?
  openingHours             String?
  registrationEmailMessage String?
  membershipEmailMessage   String?
  heroSlides               Json?
  scheduleImages           Json?
  aboutUsTitle             String?
  aboutUsStory             String?
  aboutUsMission           String?
  aboutUsVision            String?
  aboutUsValues            String?
  aboutUsTeamTitle         String?
  aboutUsTeamDescription   String?
  updatedAt                DateTime @updatedAt
}
