// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DanceStyle {
  id          String       @id @default(cuid())
  name        String       @unique
  description String
  classes     DanceClass[]
}

model DanceLevel {
  id          String       @id @default(cuid())
  name        String       @unique
  description String
  classes     DanceClass[]
}

model User {
  id                Int                  @id @default(autoincrement())
  email             String               @unique
  name              String
  avatar            String?
  role              String // "Estudiante", "Profesor", "Administrador", "Socio", "Administrativo"
  joined            DateTime             @default(now())
  dob               DateTime?
  mobile            String?
  isPartner         Boolean?
  isVisibleToStudents Boolean?
  bio               String?
  specialties       String[]
  paymentDetailsJson Json? // Storing payment details as JSON to simplify relations
  
  // Simplified relations
  taughtClasses     DanceClass[]
  enrolledClasses   DanceClass[] @relation("ClassStudents")
  memberships       StudentMembership[]
  payments          StudentPayment[]
  assignedTasks     TaskNote[]           @relation("TaskAssignees")
}

model DanceClass {
  id                      String   @id @default(cuid())
  name                    String
  type                    String // "recurring", "one-time", "workshop", "rental"
  day                     String?
  date                    DateTime?
  time                    String
  room                    String
  duration                String
  capacity                Int
  status                  String // "scheduled", "completed", "cancelled-low-attendance", "cancelled-teacher"
  isCancelledAndHidden    Boolean?
  isVisibleToStudents     Boolean?
  rentalContact           String?
  rentalPrice             Float?
  workshopPaymentType     String?
  workshopPaymentValue    Float?
  cancellationPolicyHours Int?

  styleId String
  style   DanceStyle @relation(fields: [styleId], references: [id])

  levelId String
  level   DanceLevel @relation(fields: [levelId], references: [id])

  // Simplified M-N relations
  teachers          User[]
  enrolledStudents  User[] @relation("ClassStudents")

  coupons           Coupon[] @relation("CouponClasses")
}


model StudentMembership {
  userId           Int
  planId           String
  startDate        DateTime
  endDate          DateTime
  classesRemaining Int?

  user User           @relation(fields: [userId], references: [id])
  plan MembershipPlan @relation(fields: [planId], references: [id])

  @@id([userId, planId])
}

model MembershipPlan {
  id            String    @id @default(cuid())
  title         String
  price         Float
  description   String
  features      String[]
  isPopular     Boolean   @default(false)
  durationUnit  String // "days", "weeks", "months"
  durationValue Int
  accessType    String // "unlimited", "class_pack", "trial_class", "course_pass", "custom_pack"
  visibility    String // "public", "unlisted"
  classCount    Int?
  priceTiersJson Json?

  allowedClasses   String[] // Array of DanceClass IDs
  
  students         StudentMembership[]
  payments         StudentPayment[]
  coupons          Coupon[]            @relation("CouponPlans")
}

model StudentPayment {
  id              String   @id @default(cuid())
  invoiceDate     DateTime
  totalAmount     Float
  status          String // "paid", "pending", "deposit"
  amountPaid      Float
  amountDue       Float
  notes           String?
  lastUpdatedBy   String?
  lastUpdatedDate DateTime?

  studentId Int
  student   User   @relation(fields: [studentId], references: [id])

  planId String
  plan   MembershipPlan @relation(fields: [planId], references: [id])
}

model Coupon {
  id              String   @id @default(cuid())
  code            String   @unique
  discountType    String // "percentage", "fixed"
  discountValue   Float
  expirationDate  DateTime?
  usageLimit      Int?
  status          String   // "active", "inactive"
  
  applicableTo     String // "all_memberships", "specific_memberships", "all_classes", "specific_classes"
  
  specificPlanIds  MembershipPlan[] @relation("CouponPlans")
  specificClassIds DanceClass[]     @relation("CouponClasses")
}

model Transaction {
  id          String   @id @default(cuid())
  type        String // "ingreso", "egreso"
  category    String
  description String
  amount      Float
  date        DateTime
  receiptUrl  String?
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions String[]
}

model TaskNote {
  id             String    @id @default(cuid())
  title          String
  description    String?
  status         String // "todo", "in_progress", "done"
  category       String
  priority       String? // "low", "medium", "high"
  createdAt      DateTime  @default(now())
  dueDate        DateTime?
  alertDateTime  DateTime?
  alertDismissed Boolean?

  assignees User[] @relation("TaskAssignees")
}
