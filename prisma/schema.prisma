// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DanceStyle {
  id          String       @id @default(cuid())
  name        String
  description String
  classes     DanceClass[]
}

model DanceLevel {
  id          String       @id @default(cuid())
  name        String
  description String
  classes     DanceClass[]
}

model Coupon {
  id                String    @id @default(cuid())
  code              String    @unique
  discountType      String // 'percentage' or 'fixed'
  discountValue     Float
  expirationDate    DateTime?
  usageLimit        Int?
  status            String // 'active' or 'inactive'
  applicableTo      String // 'all_memberships', 'specific_memberships', etc.
  specificPlanIds   String[]
  specificClassIds  String[]
  payments          StudentPayment[]
}

model MembershipPlan {
  id              String    @id @default(cuid())
  title           String
  price           Float
  description     String
  features        String[]
  isPopular       Boolean   @default(false)
  durationUnit    String // 'days', 'weeks', 'months'
  durationValue   Int
  visibility      String    @default("public") // 'public', 'unlisted'
  accessType      String // 'unlimited', 'class_pack', etc.
  classCount      Int?
  allowedClasses  String[]
  priceTiersJson  Json?      @map("priceTiers")

  studentMemberships StudentMembership[]
  studentPayments    StudentPayment[]
}

model DanceClass {
  id                      String   @id @default(cuid())
  name                    String
  type                    String // 'recurring', 'one-time', 'workshop', 'rental'
  styleId                 String
  levelId                 String
  day                     String
  time                    String
  room                    String
  duration                String
  capacity                Int
  enrolledStudentIds      Int[]
  cancellationPolicyHours Int?
  recurrenceMonths        Int?
  date                    DateTime?
  status                  String // 'scheduled', 'completed', etc.
  isCancelledAndHidden    Boolean?
  isVisibleToStudents     Boolean?
  rentalContact           String?
  rentalPrice             Float?
  workshopPaymentType     String?
  workshopPaymentValue    Float?

  style         DanceStyle @relation(fields: [styleId], references: [id])
  level         DanceLevel @relation(fields: [levelId], references: [id])
  teacherIds    User[]     @relation("ClassTeachers")
}

model ClassInstance {
  id            String   @id @default(cuid())
  classId       String
  date          DateTime
  status        String   // 'completed', 'scheduled', etc.
}

model AttendanceRecord {
  id        Int      @id @default(autoincrement())
  userId    Int
  classId   String
  date      DateTime
  status    String   // 'presente', 'ausente'
  student   User     @relation(fields: [userId], references: [id])
}

model User {
  id                Int      @id @default(autoincrement())
  name              String
  email             String   @unique
  role              String   // 'Estudiante', 'Profesor', etc.
  joined            DateTime @default(now())
  avatar            String
  dob               DateTime?
  mobile            String?
  isVisibleToStudents Boolean?
  isPartner         Boolean?
  bio               String?
  specialties       String[]
  paymentDetailsJson Json? @map("paymentDetails")

  taughtClasses      DanceClass[]        @relation("ClassTeachers")
  studentMemberships StudentMembership[]
  studentPayments    StudentPayment[]
  attendanceHistory  AttendanceRecord[]
  assignedTasks      TaskNote[]          @relation("TaskAssignees")
}

model Transaction {
  id          String   @id @default(cuid())
  type        String   // 'ingreso', 'egreso'
  category    String
  description String
  amount      Float
  date        DateTime
  receiptUrl  String?
}

model StudentMembership {
  id              Int      @id @default(autoincrement())
  userId          Int
  planId          String
  startDate       DateTime
  endDate         DateTime
  classesRemaining Int?

  student User            @relation(fields: [userId], references: [id])
  plan    MembershipPlan  @relation(fields: [planId], references: [id])

  @@unique([userId, planId])
}

model StudentPayment {
  id              String    @id @default(cuid())
  studentId       Int
  planId          String
  couponCode      String?
  invoiceDate     DateTime  @default(now())
  totalAmount     Float
  status          String    // 'paid', 'pending', 'deposit'
  amountPaid      Float
  amountDue       Float
  notes           String?
  lastUpdatedBy   String?
  lastUpdatedDate DateTime? @updatedAt

  student User            @relation(fields: [studentId], references: [id])
  plan    MembershipPlan  @relation(fields: [planId], references: [id])
  coupon  Coupon?         @relation(fields: [couponCode], references: [code])
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions String[]
}

model TaskNote {
  id              String    @id @default(cuid())
  title           String
  description     String?
  status          String    // 'todo', 'in_progress', 'done'
  category        String
  priority        String?   // 'low', 'medium', 'high'
  createdAt       DateTime  @default(now())
  dueDate         DateTime?
  alertDateTime   DateTime?
  alertDismissed  Boolean?  @default(false)

  assignees User[] @relation("TaskAssignees")
}
