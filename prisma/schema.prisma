// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int      @id @default(autoincrement())
  name              String
  email             String   @unique
  password          String
  role              String   @default("Estudiante")
  joined            DateTime @default(now())
  avatar            String
  dob               DateTime? @db.Date
  mobile            String?
  isVisibleToStudents Boolean?
  isPartner         Boolean?

  // Student-specific fields
  memberships       StudentMembership[]
  payments          StudentPayment[]
  enrolledClasses   DanceClass[]        @relation("EnrolledStudents")
  attendanceHistory AttendanceRecord[]

  // Teacher-specific fields
  taughtClasses     DanceClass[]        @relation("ClassTeachers")
  paymentDetailsJson Json? @map("paymentDetails")

  // Management fields
  assignedTasks     TaskNote[]          @relation("TaskAssignees")

  @@map("User")
}


model DanceClass {
  id                      String   @id @default(cuid())
  name                    String
  type                    String
  styleId                 String
  levelId                 String
  day                     String?
  time                    String
  room                    String
  duration                String
  capacity                Int
  cancellationPolicyHours Int?
  date                    DateTime? @db.Date
  status                  String   @default("scheduled")
  isCancelledAndHidden    Boolean?
  isVisibleToStudents     Boolean?
  rentalContact           String?
  rentalPrice             Float?
  workshopPaymentType     String?
  workshopPaymentValue    Float?
  
  style             DanceStyle @relation(fields: [styleId], references: [id])
  level             DanceLevel @relation(fields: [levelId], references: [id])
  teachers          User[]     @relation("ClassTeachers")
  enrolledStudents  User[]     @relation("EnrolledStudents")
  
  @@map("DanceClass")
}

model DanceStyle {
  id          String       @id
  name        String       @unique
  description String
  classes     DanceClass[]

  @@map("DanceStyle")
}

model DanceLevel {
  id          String       @id
  name        String       @unique
  description String
  classes     DanceClass[]

  @@map("DanceLevel")
}


model StudentMembership {
  userId           Int
  planId           String
  startDate        DateTime @db.Date
  endDate          DateTime @db.Date
  classesRemaining Int?

  user User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan MembershipPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@id([userId, planId])
  @@map("StudentMembership")
}


model MembershipPlan {
  id            String    @id
  title         String
  description   String
  features      String[]
  isPopular     Boolean?
  durationUnit  String
  durationValue Int
  visibility    String
  accessType    String
  price         Float?
  classCount    Int?
  priceTiersJson Json? @map("priceTiers")

  allowedClasses      String[]
  studentMemberships StudentMembership[]
  payments           StudentPayment[]
  applicableCoupons  Coupon[]          @relation("CouponApplicablePlans")

  @@map("MembershipPlan")
}

model Coupon {
  id             String   @id
  code           String   @unique
  discountType   String
  discountValue  Float
  expirationDate DateTime? @db.Date
  usageLimit     Int?
  status         String
  applicableTo   String
  
  specificPlans  MembershipPlan[] @relation("CouponApplicablePlans")

  @@map("Coupon")
}

model StudentPayment {
  id              String   @id
  studentId       Int
  planId          String
  invoiceDate     DateTime @db.Date
  totalAmount     Float
  status          String
  amountPaid      Float
  amountDue       Float
  notes           String?
  lastUpdatedBy   String?
  lastUpdatedDate DateTime?

  student User           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  plan    MembershipPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@map("StudentPayment")
}


model Transaction {
  id          String   @id
  type        String
  category    String
  description String
  amount      Float
  date        DateTime @db.Date
  receiptUrl  String?

  @@map("Transaction")
}


model AttendanceRecord {
  id        Int      @id @default(autoincrement())
  userId    Int
  classId   String
  date      DateTime @db.Date
  status    String

  student User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("AttendanceRecord")
}


model TaskNote {
  id             String    @id @default(cuid())
  title          String
  description    String?
  status         String
  category       String
  priority       String?
  createdAt      DateTime  @default(now())
  dueDate        DateTime? @db.Date
  alertDateTime  DateTime?
  alertDismissed Boolean?

  assignees User[] @relation("TaskAssignees")

  @@map("TaskNote")
}


model Role {
  id          String   @id
  name        String   @unique
  permissions String[]

  @@map("Role")
}
