
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                  @id @default(autoincrement())
  name                String
  email               String               @unique
  password            String
  role                String
  joined              DateTime             @default(now())
  avatar              String
  dob                 DateTime?            @db.Date
  mobile              String?
  isVisibleToStudents Boolean?
  isPartner           Boolean?
  bio                 String?
  specialties         String[]
  paymentDetailsJson  Json?

  taughtClasses      DanceClass[]         @relation("ClassTeachers")
  enrolledClasses    DanceClass[]         @relation("EnrolledStudents")
  memberships        StudentMembership[]
  payments           StudentPayment[]
  assignedTasks      TaskNote[]           @relation("TaskAssignees")
  attendanceHistory  AttendanceRecord[]
}

model DanceClass {
  id                     String    @id @default(cuid())
  name                   String
  type                   String // 'recurring', 'one-time', 'workshop', 'rental'
  styleId                String
  levelId                String
  day                    String?
  time                   String
  room                   String
  duration               String
  capacity               Int
  cancellationPolicyHours Int?
  date                   DateTime? @db.Date
  status                 String    @default("scheduled")
  isCancelledAndHidden   Boolean?
  isVisibleToStudents    Boolean?
  rentalContact          String?
  rentalPrice            Float?
  workshopPaymentType    String?
  workshopPaymentValue   Float?

  style             DanceStyle @relation(fields: [styleId], references: [id])
  level             DanceLevel @relation(fields: [levelId], references: [id])
  teachers          User[]     @relation("ClassTeachers")
  enrolledStudents  User[]     @relation("EnrolledStudents")
  coupons           Coupon[]   @relation("CouponClasses")
  attendance        AttendanceRecord[]
}

model DanceStyle {
  id          String       @id @default(cuid())
  name        String       @unique
  description String
  classes     DanceClass[]
}

model DanceLevel {
  id          String       @id @default(cuid())
  name        String       @unique
  description String
  classes     DanceClass[]
}

model MembershipPlan {
  id               String              @id @default(cuid())
  title            String
  price            Float
  description      String
  features         String[]
  isPopular        Boolean?
  durationUnit     String
  durationValue    Int
  accessType       String
  classCount       Int?
  priceTiersJson   Json?
  visibility       String              @default("public")
  allowedClasses   String[]
  
  studentMemberships StudentMembership[]
  studentPayments    StudentPayment[]
  coupons            Coupon[]            @relation("CouponMemberships")
}

model StudentMembership {
  userId           Int
  planId           String
  startDate        DateTime
  endDate          DateTime
  classesRemaining Int?

  user User           @relation(fields: [userId], references: [id])
  plan MembershipPlan @relation(fields: [planId], references: [id])

  @@id([userId, planId])
}

model StudentPayment {
  id              String   @id @default(cuid())
  studentId       Int
  planId          String
  invoiceDate     DateTime
  totalAmount     Float
  status          String
  amountPaid      Float
  amountDue       Float
  notes           String?
  lastUpdatedBy   String?
  lastUpdatedDate DateTime?

  student User           @relation(fields: [studentId], references: [id])
  plan    MembershipPlan @relation(fields: [planId], references: [id])
}

model Coupon {
  id              String   @id @default(cuid())
  code            String   @unique
  discountType    String
  discountValue   Float
  expirationDate  DateTime?
  usageLimit      Int?
  status          String
  applicableTo    String
  
  specificPlans   MembershipPlan[] @relation("CouponMemberships")
  specificClasses DanceClass[]     @relation("CouponClasses")
}

model Transaction {
  id          String   @id @default(cuid())
  type        String
  category    String
  description String
  amount      Float
  date        DateTime
  receiptUrl  String?
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions String[]
}

model TaskNote {
  id             String    @id @default(cuid())
  title          String
  description    String?
  status         String
  category       String
  priority       String?
  createdAt      DateTime  @default(now())
  dueDate        DateTime?
  alertDateTime  DateTime?
  alertDismissed Boolean   @default(false)
  
  assignees User[] @relation("TaskAssignees")
}

model AttendanceRecord {
  id        Int      @id @default(autoincrement())
  classId   String
  date      DateTime
  status    String // 'presente' | 'ausente'
  studentId Int

  student   User       @relation(fields: [studentId], references: [id])
  danceClass DanceClass @relation(fields: [classId], references: [id])
}
