// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DanceStyle {
  id          String       @id @default(cuid())
  name        String       @unique
  description String
  classes     DanceClass[]
}

model DanceLevel {
  id          String       @id @default(cuid())
  name        String       @unique
  description String
  classes     DanceClass[]
}

model User {
  id                  Int                 @id @default(autoincrement())
  name                String
  email               String              @unique
  password            String
  role                String              @default("Estudiante")
  joined              DateTime            @default(now())
  avatar              String
  dob                 DateTime?
  mobile              String?
  isVisibleToStudents Boolean?
  isPartner           Boolean?
  bio                 String?
  specialties         String[]
  paymentDetailsJson  Json?
  
  taughtClasses       DanceClass[]        @relation("TeacherClasses")
  enrolledClasses     DanceClass[]        @relation("EnrolledStudents")
  memberships         StudentMembership[]
  payments            StudentPayment[]
  assignedTasks       TaskNote[]          @relation("AssignedTasks")
  attendanceHistory   AttendanceRecord[]
}

model DanceClass {
  id                      String   @id @default(cuid())
  name                    String
  type                    String
  styleId                 String
  levelId                 String
  day                     String?
  time                    String
  room                    String
  duration                String
  capacity                Int
  date                    DateTime?
  status                  String   @default("scheduled")
  isCancelledAndHidden    Boolean?
  isVisibleToStudents     Boolean?
  rentalContact           String?
  rentalPrice             Float?
  workshopPaymentType     String?
  workshopPaymentValue    Float?
  cancellationPolicyHours Int?

  style            DanceStyle @relation(fields: [styleId], references: [id])
  level            DanceLevel @relation(fields: [levelId], references: [id])
  teachers         User[]     @relation("TeacherClasses")
  enrolledStudents User[]     @relation("EnrolledStudents")
}

model MembershipPlan {
  id             String   @id @default(cuid())
  title          String
  price          Float?
  description    String
  features       String[]
  isPopular      Boolean?
  durationUnit   String
  durationValue  Int
  accessType     String
  classCount     Int?
  visibility     String
  allowedClasses String[]
  priceTiersJson Json?

  StudentMembership StudentMembership[]
  StudentPayment    StudentPayment[]
  coupons           Coupon[]          @relation("CouponApplicablePlans")
}

model StudentMembership {
  startDate        DateTime
  endDate          DateTime
  classesRemaining Int?

  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  plan    MembershipPlan @relation(fields: [planId], references: [id])
  planId  String

  @@id([userId, planId])
}

model StudentPayment {
  id              String   @id @default(cuid())
  invoiceDate     DateTime @default(now())
  totalAmount     Float
  status          String
  amountPaid      Float
  amountDue       Float
  notes           String?
  lastUpdatedBy   String?
  lastUpdatedDate DateTime?

  student   User           @relation(fields: [studentId], references: [id])
  studentId Int
  plan      MembershipPlan @relation(fields: [planId], references: [id])
  planId    String
}

model Coupon {
  id             String   @id @default(cuid())
  code           String   @unique
  discountType   String
  discountValue  Float
  expirationDate DateTime?
  usageLimit     Int?
  status         String
  applicableTo   String

  specificPlans MembershipPlan[] @relation("CouponApplicablePlans")
}

model Transaction {
  id          String   @id @default(cuid())
  type        String
  category    String
  description String
  amount      Float
  date        DateTime
  receiptUrl  String?
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions String[]
}

model TaskNote {
  id             String    @id @default(cuid())
  title          String
  description    String?
  status         String
  category       String
  priority       String?
  createdAt      DateTime  @default(now())
  dueDate        DateTime?
  alertDateTime  DateTime?
  alertDismissed Boolean   @default(false)

  assignees User[] @relation("AssignedTasks")
}

model AttendanceRecord {
  id        Int      @id @default(autoincrement())
  classId   String
  date      DateTime
  status    String

  student   User @relation(fields: [studentId], references: [id])
  studentId Int
}
