// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}


model User {
  id                    Int                 @id @default(autoincrement())
  email                 String              @unique
  name                  String
  role                  String
  joined                DateTime            @default(now())
  avatar                String?
  dob                   DateTime?
  mobile                String?
  isVisibleToStudents   Boolean?
  isPartner             Boolean?
  bio                   String?
  specialties           String[]
  paymentDetailsJson    Json? // Using Json type for flexible object
  
  studentMemberships    StudentMembership[]
  studentPayments       StudentPayment[]
  assignedTasks         TaskNote[]          @relation("TaskAssignees")
  taughtClasses         DanceClass[]        @relation("ClassTeachers")
}

model DanceStyle {
  id          String @id @default(cuid())
  name        String @unique
  description String
  classes     DanceClass[]
}

model DanceLevel {
  id          String @id @default(cuid())
  name        String @unique
  description String
  classes     DanceClass[]
}

model DanceClass {
  id                      String @id @default(cuid())
  name                    String
  type                    String
  styleId                 String
  levelId                 String
  teacherIds              User[] @relation("ClassTeachers")
  day                     String?
  time                    String
  room                    String
  duration                String
  capacity                Int
  enrolledStudentIds      Int[]
  cancellationPolicyHours Int?
  date                    DateTime?
  status                  String
  isCancelledAndHidden    Boolean?
  isVisibleToStudents     Boolean?
  rentalContact           String?
  rentalPrice             Float?
  workshopPaymentType     String?
  workshopPaymentValue    Float?
  
  style                   DanceStyle @relation(fields: [styleId], references: [id])
  level                   DanceLevel @relation(fields: [levelId], references: [id])
  
  coupons                 Coupon[] @relation("ClassCoupons")
}

model MembershipPlan {
  id                  String @id @default(cuid())
  title               String
  price               Float?
  description         String
  features            String[]
  isPopular           Boolean?
  durationUnit        String
  durationValue       Int
  visibility          String
  accessType          String // e.g., 'unlimited', 'class_pack'
  classCount          Int?
  allowedClasses      String[]
  priceTiersJson      Json?

  studentMemberships  StudentMembership[]
  payments            StudentPayment[]
  coupons             Coupon[] @relation("MembershipCoupons")
}

model StudentMembership {
  userId           Int
  planId           String
  startDate        DateTime
  endDate          DateTime
  classesRemaining Int?

  user User @relation(fields: [userId], references: [id])
  plan MembershipPlan @relation(fields: [planId], references: [id])

  @@id([userId, planId])
}

model StudentPayment {
  id                String @id @default(cuid())
  studentId         Int
  planId            String
  invoiceDate       DateTime
  totalAmount       Float
  status            String
  amountPaid        Float
  amountDue         Float
  notes             String?
  lastUpdatedBy     String?
  lastUpdatedDate   DateTime?

  student User @relation(fields: [studentId], references: [id])
  plan    MembershipPlan @relation(fields: [planId], references: [id])
}

model Coupon {
  id                 String @id @default(cuid())
  code               String @unique
  discountType       String
  discountValue      Float
  expirationDate     DateTime?
  usageLimit         Int?
  status             String
  applicableTo       String
  specificPlanIds    MembershipPlan[] @relation("MembershipCoupons")
  specificClassIds   DanceClass[] @relation("ClassCoupons")
}

model Transaction {
  id          String @id @default(cuid())
  type        String
  category    String
  description String
  amount      Float
  date        DateTime
  receiptUrl  String?
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions String[]
}

model TaskNote {
  id             String   @id @default(cuid())
  title          String
  description    String?
  status         String
  category       String
  priority       String?
  assignees      User[]   @relation("TaskAssignees")
  createdAt      DateTime @default(now())
  dueDate        DateTime?
  alertDateTime  DateTime?
  alertDismissed Boolean? @default(false)
}
